
#include <iostream>
using namespace std;

int main()
    {
int a;
int b;
cout <<"enter your reg no:huseni.";
cin >>a;
cout <<"Enter Your Frds Reg no.";
cin>>b; 
cout <<" your Reg no is:"<<a<<endl;
cout <<"Yours Frds Reg no is:"<<b;
return 0;
}

-------------------------------------------------------------------------
#include <iostream>
using namespace std;
int main() {
int a=10;
int b=20;
cout<<"addition;"<<a+b<<endl;
cout <<"substraction:"<<a-b<<endl;
    return 0;
}

-------------------------------------------------------------------------
#include <iostream>
using namespace std;
int main() {
int a=10;
float b=50.6 ;
double c=10.8992635;
char d='H' ;
string e= "Huseni"; 
cout <<"integer"<<a<<endl;
cout<<"float"<<b<<endl;
<<endl;
    return 0;
}
-----------------------------------------------------------------------
#include <iostream>
using namespace std;
int main() {
int a=10;
int b=20;
cout<<"greater"<<(a>b)<<endl;
cout <<"lesser:"<<(a<b)<<endl;
    return 0;
}

-------------------------------------------------------------------------

#include <iostream>
using namespace std;
int main() {
int age;
float height;
string name;
double weight;
char bloodgroup;
cout<<"name:";
cin>>name;
cout<<"age:";
cin>>age;
cout<<"height(in feet):";
cin>>height;
cout<<"weight(in kgs):";
cin>>weight;
cout<<"blood group:";
cin>>bloodgroup;
}

-------------------------------------------------------------------------

}#include <iostream>
using namespace std;
class teacher {
private:
//data members
string name;
string subject;
int years;
public:
void setdetail(string tname,string tsubject,int tyears)
{
    name =tname;
    subject =tsubject;
    years =tyears;
}
// member function
void display()
{
    cout<<"name:"<<name
        <<",subject:"<<subject
        <<",year:"<<years<<endl;
}

;
  int main() {
      //create 2 object
      teacher t1,t2,t3;
      //assign values to object
      /*t1.name ="riya";
      t1.subject ="electronics";
      t1.year =9; */
      t1.setdetail("riya","electronics",9);
      t2.setdetail("raj","cs",4);
      t3.setdetail("rakesh","cs",6);
      
      t1.display();
       t2.display();
       t3.display();
      
      
  } 

------------------------------------------------------------------------
 #include<iostream>
using namespace std;
class car{
    public:
    string make;
    string model;
    int year;
    
    //default constructor(no parameters)
    car() {
        make=" BENZ";
        model=" Xo8";
        year= 2008;
    }
    
    void displayinfo() {
        cout<<year<<""<<make<<""<<model<<endl;
    }
    };
    int main () {
        //creating an object using default construction
        car mycar;
        mycar.displayinfo();
        return 0;
    }

-------------------------------------------------------------------------
variables in C++ :

variables>>>> In C++ Are used to store data and manipulated through programme
data types in c+
data types help the compiler allocate the appropriate amount of 
memory and determine how to interpret the data
int>>>>these are used to store integer values (whole number)
i.e. 1,2,3,4.
float >>>> used to store decimal values ( single precision) >>> I.e.10.4,7.7
dobl3e >>>>(double precision )i.e. 10.777,5.764
char >>>> used to store a single character i.e. A,D.
string >>>> is a sequence of characters i.e. "hello">>>`hello`

-------------------------------------------------------------------------


#include <iostream>
using namespace std;
int main() {
int a=10;
int b=20;
cout<<"multiplication;"<<(a*b)<<endl;
cout <<"division:"<<(a/b)<<endl;
    return 0;
}

-------------------------------------------------------------------------
#include <iostream>
using namespace std;
int main() {
int a=10,b=20;
cout<<"logical AND exp1:"<<(a>5 && a<20)<<endl;
cout<<"logical AND exp2:"<<(a<5 && a<15)<<endl;
cout<<"logical OR exp1:"<<(a>0 || b<0)<<endl;
cout<<"logical NOT :"<<!(a>0)<<endl;
    return 0;
    }
------------------------------------------------------------------------


#include <iostream>
using namespace std;
int main() {
int a=10;
if (a>15)
{
cout <<a<< "is greater than 15";
}

  else {
cout <<a<< " is less than 15 ";
}
    return 0;
}

-------------------------------------------------------------------------

#include <iostream>
using namespace std;
int main () {
int a;
cout<<"enter a number:";
cin>>a;
if (a%2==0)
{
    cout<<a<<"is even!";
}
else
{
    cout<<a<<"is odd!";
}
}

-----------------------------------------------------------------------
#include <iostream>
using namespace std;
int main () {
int age;
cout<<"enter your age:";
cin>>age;
if (age>=18)
{
    cout<<age<<"is  eligible for voting!";
}
else
{
 int years_left = 18-age;
    cout<<age<<"is not eligible for voting!"<<endl;
    cout<<"you have to wait for"<< years_left<<"years";
}
}
    

-------------------------------------------------------------------------

#include <iostream>
using namespace std;
int main() {
int num1,num2,num3;
cout<<"enter three numbers:";
cin>>num1>>num2>>num3;

if (num1>=num2 && num1>=num3)
{
cout<<num1<<"is the greatest number"<<endl;
}
else if (num2>=num1>=num3)
{
    cout<<num2<<"is the greatest number"<<endl;
}
else
{
    cout<<num3<<"is the largest number"<<endl;
}
}

 ---------------------------------------------------------------------
loops in C++ are used to execute a block of code repeatedly until a certain condition is met . they help in manage repetitive tasks.
1.for loop: used when the number of iterations is known beforehand.
2.while loop : used when the number of iterations is not known and depends on a condition.
3.do while loop : similar to the while loop ,but guarantees that the block oloop in C++
f code will executed at least once before checking the condition.

-----------------------------------------------------------------------

#include <iostream>
using namespace std;
int main() 
{
int i=1;
while (i<=5)
    {
        cout<<i<<endl;
        i++;
    }
}

-------------------------------------------------------------------------


#include <iostream>
using namespace std;
int main() 
{
int i=1;
do
 {
        cout<<i<<endl;
        i++;
    }while(i<=5);
}

-----------------------------------------------------------------------
functions in C++.
a function in C++ is a group of statements that performs a specific task and can be reused anywhere in the program.


1.Resuability _write once , use many times .

2.Readability _code becomes easier to read and understand.

3.Debugging _ errors are easier to find since each function is small and focused.

4.modularity _large programs are divided into smaller parts.

5.collaboration _multiple people can work on different functions of the same program.

-----------------------------------------------------------------------
#include<iostream>
using namespace std;
  
class movie 
{
   public:
   string director;
   string title;
   float duration;
   
movie()
{
    cout<<"director name:"<<"rajamouli"<<endl;
    cout<<"title name:"<<"bahubali"<<endl;
    cout<<"duration:"<<3.45<<endl;
}
}; 
  int main ()
  {
    movie m1;
   
    return 0;
}

------------------------------------------------------------------------


#include <iostream>
using namespace std;
void greet()
{
    cout<<"HAPPY BIRTHDAY!!!!"<<endl;
}
int main() 
{
greet();
return 0;
}

-------------------------------------------------------------------------


#include <iostream>
using namespace std;
int add(int a,int b) //passing parameters
{
    return a + b; //returning the values
}
int multi(int a,int b)
{
    return a * b;
}
int sub(int a,int b)
{
    return a - b;
}
int main ()
{
    cout<<"ADDITION:"<<add(5,10)<<endl;
    cout<<"MULTIPLICATION:"<<multi(5,10) <<endl;
    cout<<"SUBSTRACTION:"<<sub(5,10);

}

------------------------------------------------------------------------


#include <iostream>
using namespace std;
int add(int a,int b) //passing parameters
{
    return a + b; //returning the values
}
int multi(int a,int b)
{
    return a * b;
}
int sub(int a,int b)
{
    return a - b;
}
float div1(int a,int b)
{
    if (b==0)
    {
        cout<<"division by zero!! infinite"<<endl;
}
return (float)a / b;
}
int main ()
{
    cout<<"ADDITION:"<<add(5,10)<<endl;
    cout<<"MULTIPLICATION:"<<multi(5,10) <<endl;
    cout<<"SUBSTRACTION:"<<sub(5,10)<<endl;
    cout<<"DIVISION:"<<div1(5,10);
}

------------------------------------------------------------------------

#include <iostream>
using namespace std;
int main() 
{
int day;
cout<<"enter a number (1-7) corresponding to the day of the week:";
cin>>day;
switch (day)
{
    case 1:
    cout<<"MONDAY"<<endl;
    break;
    case 2:
    cout<<"TUESDAY"<<endl;
    break;
    case 3:
    cout<<"WEDNESDAY"<<endl;
    break;
   case 4:
    cout<<"THURSDAY"<<endl;
    break;
 case 5:
    cout<<"FRIDAY"<<endl;
    break;
   case 6:
   cout<<"SATURDAY"<<endl;
   break;
   case 7:
   cout<<"SUNDAY"<<endl;
   break;
   default :
   cout<<"invalid input! plese enter a number between 1 and 7"<<endl;
   break;
}
    return 0;
}

-------------------------------------------------------------------------
#include <iostream>
using namespace std;
int main() 
{
char day;
cout<<"enter a alphabet letter  (A-Z) corresponding to the day of the week:";
cin>>day;
day = toupper(day);
switch (day)
{
    case 'A':
    cout<<"MONDAY"<<endl;
    break;
    case 'B':
    cout<<"TUESDAY"<<endl;
    break;
    case 'C':
    cout<<"WEDNESDAY"<<endl;
    break;
   case 'D':
    cout<<"THURSDAY"<<endl;
    break;
 case 'E':
    cout<<"FRIDAY"<<endl;
    break;
   case 'F':
   cout<<"SATURDAY"<<endl;
   break;
   case 'G':
   cout<<"SUNDAY"<<endl;
   break;
   default :
   cout<<"invalid input! plese enter a alphabet letter between A and Z"<<endl;
   break;
}
    return 0;
}

------------------------------------------------------------------------
#include<iostream>
using namespace std;
  
class parent
{
   public:
   void food()
   {
       cout<<"inherited,burger" ; }
   };
   class child :public parent //creating the child class and inheriting it
   { };
   
    int main ()
  {
    child b;
    b.food();
    
    return 0;
}

-------------------------------------------------------------------------


#include<iostream>
using namespace std;

class teacher
{
    public:
    string name;
    string dept;
    int experience;
    float salary;
    
    //constructor
    teacher()
    {
        cout<<"teacher name:"<<name<<"hussain"<<endl;
        cout<<"department:"<<dept<<"computer science"<<endl;
        cout<<"experience:"<<8<<endl;
        cout<<" teacher salary:"<<74000<<endl;
    };
};
int main()
{
    teacher t1; //create an object

------------------------------------------------------------------------
#include<iostream>
using namespace std;

class teacher
{
    public:
    string name;
    string dept;
    int experience;
    double salary;
    
    //constructor
    teacher()
    {
       name ="hussain";
       dept ="cse";
       experience =2;
       salary =740000;
    
   
        cout<<"teacher name:"<<name<<endl;
        cout<<"department:"<<dept<<endl;
        cout<<"experience:"<<experience<<endl;
        cout<<"salary:"<<salary<<endl;
    };
};
int main()
{
    teacher t1; //create an object
}

-------------------------------------------------------------------------

#include <iostream>
using namespace std;

class car {
    public:  // public  access specifier
    string brand;
    string model;
    int price;
    int year;
};

int main () {
    car car1; //creating an object of the class car
    car1.brand="BMW";
    car1.model="B-class";
    car1.price=5000000;
    car1.year=2024;
    cout<<car1.brand<<endl; // direct way of printing
    cout<<car1.model<<endl; // direct way of printing
    cout<<car1.price<<endl;
    cout<<car1.year<<endl;
     return 0;
}


#include <iostream>
using namespace std;

class car {
    public:  // public  access specifier
    string brand;
    string model;
    int price;
    int year;

//function to display the output
void display()
{
  cout<<"brand name:"<<brand<<endl; 
  cout<<"model name:"<<model<<endl; 
  cout<<"price:"<<price<<endl; 
  cout<<"year of manufacturing:"<<year<<endl; 
}
 };
int main () {
    car car1; //creating an object of the class car
    car1.brand="BMW";
    car1.model="B-class";
    car1.price=5000000;
    car1.year=2024;
    
    car car2;
    car2.brand="TESLA";
    car2.model="H-class";
    car2.price=6000000;
    car2.year=2025;
    cout<<car1.brand<<endl; // direct way of printing
    cout<<car1.model<<endl; // direct way of printing
    cout<<car1.price<<endl;
    cout<<car1.year<<endl;
    car1.display();
    cout<<endl;
    car2.display();
     return 0;
} 


#include <iostream>
using namespace std;


class car {
    public:  // public  access specifier
    string brand;
    string model;
    int price;
    int year;

//function to display the output
void display()
{
  cout<<"brand name:"<<brand<<endl; 
  cout<<"model name:"<<model<<endl; 
  cout<<"price:"<<price<<endl; 
  cout<<"year of manufacturing:"<<year<<endl; 
}
 };
int main () {
    car car1; //creating an object of the class car
    cout<<"enter the brand name:";
  cin>>car1.brand;
getline(cin,car1.brand);
cout<<"enter the model name:";
 cin>>car1.model;
getline(cin,car1.model);
cout<<"enter the price name:";
 cin>>car1.price;

cout<<"enter the manufacturing year:";
 cin>>car1.year;
 
 car car2; //creating an object of the class car
    cout<<"enter the brand name:";
  cin>>car2.brand;
getline(cin,car2.brand);
cout<<"enter the model name:";
 cin>>car2.model;
getline(cin,car2.model);
cout<<"enter the price name:";
 cin>>car2.price;

cout<<"enter the manufacturing year:";
 cin>>car2.year;

         
return 0;




} #include <iostream>
using namespace std;


class T{
    public:  // public  access specifier
    string subject;
    string teacher;
    char gender;
    int years;
    void display()
    {

     cout<<"subject name:"<<subject<<endl;
  cout<<"teacher name:"<<teacher<<endl;
  cout<<"gender name:"<<gender<<endl;
  cout<<"years:"<<years<<endl;
  
    }
};
int main(){
T t1;
cout<<"enter the subject name:"<<endl;
getline(cin,t1.teacher);
cout<<"enter the teacher name:"<<endl;
 cin>>t1.subject;
getline(cin,t1.subject);
cout<<"enter the gender name:"<<endl;
 cin>>t1.gender;
 cout<<"enter the years:"<<endl;
cin>>t1.years;
 cin.ignore(); // buffer values will be ignored
T t2;
cout<<"enter the subject name:"<<endl;
  cin>>t2.subject;
getline(cin,t2.subject);
cout<<"enter the teacher name:"<<endl;
 cin>>t2.teacher;
getline(cin,t2.teacher);
cout<<"enter the gender name:"<<endl;
 cin>>t2.gender;

cout<<"enter the year:"<<endl;
 cin>>t2.years;

         
return 0;




} 

-----------------------------------------------------------------------

#include <iostream>
using namespace std;
class teacher {
private:
//data members
string name;
string subject;
int years;
public:
void setdetail(string tname,string tsubject,int tyears)
{
    name =tname;
    subject =tsubject;
    years =tyears;
}
// member function
void display()
{
    cout<<"name:"<<name
        <<",subject:"<<subject
        <<",year:"<<years<<endl;
}

};
  int main() {
      //create 2 object
      teacher t1,t2,t3;
      //assign values to object
      /*t1.name ="riya";
      t1.subject ="electronics";
      t1.year =9; */
      t1.setdetail("riya","electronics",9);
      t2.setdetail("raj","cs",4);
      t3.setdetail("rakesh","cs",6);
      
      t1.display();
       t2.display();
       t3.display();
      
      
  }  
------------------------------------------------------------------------
#include<iostream>
using namespace std;
class car{
    public:
    string make;
    string model;
    int year;
    
    //default constructor(no parameters)
    car() {
        make=" BENZ";
        model=" Xo8";
        year= 2008;
    }
    
    void displayinfo() {
        cout<<year<<""<<make<<""<<model<<endl;
    }
    };
    int main () {
        //creating an object using default construction
        car mycar;
        mycar.displayinfo();
        return 0;
    }

-------------------------------------------------------------------------


#include<iostream>
using namespace std;
class teacher
{
    public:
    string name;
    string dept;
    int experience;
    float salary;
    //constructor
    teacher(string n,string d,int e,int s)
    {
        cout<<"teacher name:"<<n;
        cout<<"department:"<<d;
        cout<<"experience:"<<e;
        cout<<" teacher salary:"<<s;
        cout<<endl;
    }
};
int main()
{
    teacher t1("hussain","cse",8,74000);
    teacher t2("lukar","ece",9,9087);
    
}
    

-------------------------------------------------------------------------

differences:

feature      encapsulation                          abstraction

focus        no data is hidden inside a class       what functionalities are exposed

achieved by  access modifiers (privates,public)     abstract classes,interfaces,or pure virtual functions

-------------------------------------------------------------------------



loops in C++ are used to execute a block of code repeatedly until a certain condition is met . they help in manage repetitive tasks.
1.for loop: used when the number of iterations is known beforehand.
2.while loop : used when the number of iterations is not known and depends on a condition.
3.do while loop : similar to the while loop ,but guarantees that the block oloop in C++
f codeloops in C++ are used to execute a block of code repeatedly until a certain condition is met . they help in manage repetitive tasks.
1.for loop: used when the number of iterations is known beforehand.
2.while loop : used when the number of iterations is not known and depends on a condition.
3.do while loop : similar to the while loop ,but guarantees that the block oloop in C++
f code will executed at least once before checking the condition. will executed at least once before checking the condition.

-------------------------------------------------------------------------



    






